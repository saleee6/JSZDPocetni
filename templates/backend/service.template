// Autogenerated from service.template file at {{time}}
package com.example.demo.generated.services;

import com.example.demo.generated.interfaces.{{entity.name}}Interface;
import com.example.demo.generated.models.*;
import com.example.demo.generated.dtos.*;
import com.example.demo.generated.repositories.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class {{entity.name}}Service implements {{entity.name}}Interface {

    @Autowired
    private {{entity.name}}Repository {{entity.name|uncapitalize}}Repository;

    {% for property in entity.properties %}
    {% if not property.type|isSimpleType %}
    @Autowired
    private {{property.type.name}}Repository {{property.type.name|uncapitalize}}Repository;
    {% endif %}
    {% endfor %}

    @Override
    public {{entity.name}}DTO get{{entity.name}}(Long id) {
        return {{entity.name|uncapitalize}}Repository.get{{entity.name}}ById(id).toDTO();
    }

    @Override
    public ArrayList<{{entity.name}}DTO> getAll{{entity|return_plural}}() {
        ArrayList<{{entity.name}}DTO> list = new ArrayList<>();
        ArrayList<{{entity.name}}> tempList = (ArrayList<{{entity.name}}>){{entity.name|uncapitalize}}Repository.findAll();
        tempList.forEach({{entity.name|uncapitalize}} -> {
            list.add({{entity.name|uncapitalize}}.toDTO());
        });
        return list;
    }

    @Override
    public {{entity.name}}DTO store{{entity.name}}({{entity.name}}DTO {{entity.name|uncapitalize}}DTO) {
        {{entity.name}} {{entity.name|uncapitalize}} = new {{entity.name}}({{entity.name|uncapitalize}}DTO.getId(), {% for n in range(entity.properties|length) %}{% if entity.properties[n].type|isSimpleType %}{{entity.name|uncapitalize}}DTO.{% if entity.properties[n].type|javatype == "boolean" %}is{% else %}get{% endif %}{{entity.properties[n].name|capitalize}}(){% elif not entity.properties[n].collectionType %}{{entity.properties[n].type.name|uncapitalize}}Repository.get{{entity.properties[n].type.name}}ById({{entity.name|uncapitalize}}DTO.get{{entity.properties[n].name|capitalize}}()){% elif entity.properties[n].collectionType.type == "Set" %}new HashSet<{{entity.properties[n].type.name}}>({{entity.properties[n].type.name|uncapitalize}}Repository.findByIdIn({{entity.name|uncapitalize}}DTO.get{{entity.properties[n].name|capitalize}}())){% else %}{{entity.properties[n].type.name|uncapitalize}}Repository.findByIdIn({{entity.name|uncapitalize}}DTO.get{{entity.properties[n].name|capitalize}}()){% endif %}{% if n != entity.properties|length - 1 %}, {% endif %}{% endfor %});
        return {{entity.name|uncapitalize}}Repository.save({{entity.name|uncapitalize}}).toDTO();
    }

    @Override
    public void delete{{entity.name}}(Long id) {
        {{entity.name}} {{entity.name|uncapitalize}} = {{entity.name|uncapitalize}}Repository.get{{entity.name}}ById(id);
        {% for property in entity.properties %}{% if property.relation %}{% if property.relation.type == "ManyToMany" %}
        
        for({{property.type.name}} var : new ArrayList<>({{entity.name|uncapitalize}}.get{{property.type|return_plural}}())) {
            {{entity.name|uncapitalize}}.get{{property.type|return_plural}}().remove(var);
            {% if property.join_table %}
            var.get{{entity|return_plural}}().remove({{entity.name|uncapitalize}});
            {% endif %}
        }
        {{entity.name|uncapitalize}} = {{entity.name|uncapitalize}}Repository.save({{entity.name|uncapitalize}});{% endif %}
        {% endif %}{% endfor %}
        
        {{entity.name|uncapitalize}}Repository.delete({{entity.name|uncapitalize}});
    }
}