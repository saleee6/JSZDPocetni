// Autogenerated from entity.template file at {{time}}
package com.example.demo.generated.models;

import com.example.demo.generated.dtos.{{entity.name|capitalize}}DTO;

import javax.persistence.*;
import java.util.*;

@Entity
public class {{entity.name|capitalize}} {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  {% for property in entity.properties %}{% if property.type | isSimpleType %}  @Column{% if property.constraints %}({% for n in range(property.constraints | length) %}{% if property.constraints[n].type|lower == 'notnullable' %}nullable=false{% elif property.constraints[n].type|lower == 'unique' %}unique=true{% else %}{{property.constraints[n].type|lower}}={{property.constraints[n].value}}{% endif %}{% if n < property.constraints | length - 1 %}, {% endif %}{% endfor %})
  {% else %}
  
  {% endif %}
  {% else %}
  {% if property.relation %}  @{{property.relation.type}}{% if property.relation.decorators %}({% for n in range(property.relation.decorators | length)%}{{ property.relation.decorators[n].type | lower }} = {{ property.relation.decorators[n].type }}Type.{{ property.relation.decorators[n].value }}{% if n != (property.relation.decorators | length - 1)%}, {% endif %}
  {% endfor %}){% endif %}{% endif %} 
  {% endif %}
  private {% if property.collectionType %}{{property.collectionType.type}}<{% endif %}{{property.type|javatype}}{% if property.collectionType %}>{% endif %} {{property.name}};

  {% endfor %}
  public {{entity.name|capitalize}}() {
    {% for property in entity.properties %}{% if property.collectionType %}
    {{property.name}} = new {% if property.collectionType.type == "List" %}Array{% elif property.collectionType.type == "Set" %}Hash{% endif %}{{property.collectionType.type}}<{{property.type|javatype}}>();{% endif %}{% endfor %} 
  }

  public {{entity.name|capitalize}}(Long id, {% for n in range(entity.properties|length) %}{% if entity.properties[n].type|isSimpleType %}{{entity.properties[n].type|javatype}} {{entity.properties[n].name}}{% elif not entity.properties[n].collectionType %}{{entity.properties[n].type.name}} {{entity.properties[n].name}}{% else %}{{entity.properties[n].collectionType.type}}<{{entity.properties[n].type|javatype}}> {{entity.properties[n].name}}{% endif %}{% if n != entity.properties|length - 1 %}, {% endif %}{% endfor %}) {
    this.id = id;
    {% for property in entity.properties %}
    this.{{property.name}} = {{property.name}};
    {% endfor %}
  }

  public Long getId(){
    return this.id;
  }
  {% for property in entity.properties %}

  public {% if property.collectionType %}{{property.collectionType.type}}<{% endif %}{{property.type|javatype}}{% if property.collectionType %}>{% endif %} get{{property.name|capitalize}}(){
    return this.{{property.name}};
  }

  public void set{{property.name|capitalize}}({% if property.collectionType %}{{property.collectionType.type}}<{% endif %}{{property.type|javatype}}{% if property.collectionType %}>{% endif %} new_value){
    this.{{property.name}} = new_value;
  }
  {% endfor %}

  public {{entity.name|capitalize}}DTO toDTO() {
    {% for property in entity.properties %}
    {% if not property.type|isSimpleType and property.collectionType %}
    ArrayList<Long> {{property.name}} = new ArrayList<Long>();
    this.get{{property.name|capitalize}}().forEach(item -> { {{property.name}}.add(item.getId());});
    {% endif %}
    {% endfor %}
    
    return new {{entity.name|capitalize}}DTO(this.id, {% for n in range(entity.properties|length) %}{% if entity.properties[n].type|isSimpleType %}this.{{entity.properties[n].name}}{% elif not entity.properties[n].collectionType %}this.{{entity.properties[n].name}} != null ? this.{{entity.properties[n].name}}.getId() : 0{% else %}{{entity.properties[n].name}}{% endif %}{% if n != (entity.properties | length - 1) %}, {% endif %}{% endfor %});
  }
}