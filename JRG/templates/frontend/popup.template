// Autogenerated from popup.template file at {{time}}
import {
  Button,
  Checkbox,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  FormControl,
  FormControlLabel,
  Input,
  InputLabel,
  ListItemText,
  MenuItem,
  Select,
  Switch,
  TextField,
  FormHelperText,
} from "@material-ui/core";
import { useFormik } from "formik";
import React, { VFC } from "react";
import * as yup from "yup";
import { {{entity.name}}PopupProps } from "../../interfaces/generated/I{{entity.name}}Popup";
import * as types from "../../types/generated/Types";

const validationSchema = yup.object({
  {% for property in entity.properties %}
  {% if property.type|isSimpleType %}
  {{property.name}}: yup.{{property.type|jstype}}(){% if property.type.name == "int" %}.integer(){% endif %}{% for constraint in property.constraints %}{{constraint|constraint_type}}{% endfor %},{% else %}
  {{property.name}}: {% if not property.collectionType %}yup.number(),{% else %}yup.array().of(
    yup.number(),){% endif %}
  {% endif %}

  {% endfor %}
});

const ITEM_HEIGHT = 48;
const ITEM_PADDING_TOP = 8;
const MenuProps = {
  PaperProps: {
    style: {
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
      width: 250,
    },
  },
};

const {{entity.name}}Popup: VFC<{{entity.name}}PopupProps> = ({
  opened,
  handleClose,
  handleOnSubmit,
  {{entity.name|uncapitalize}},
  {% for property in entity.properties %}
  {% if not property.type|isSimpleType %}
  {{property.type|return_plural|uncapitalize}},
  {% endif %}
  {% endfor %}
}) => {
  const formik = useFormik({
    initialValues: {
      id: {{entity.name|uncapitalize}} ? {{entity.name|uncapitalize}}.id : 0, 
      {% for property in entity.properties %}
      {% if property.type|isSimpleType %}
      {{property.name}}: {{entity.name|uncapitalize}} ? {{entity.name|uncapitalize}}.{{property.name}} : {{property|initial_value}},
      {% else %}
      {{property.name}}: {{entity.name|uncapitalize}} ? {{entity.name|uncapitalize}}.{{property.name}} : {% if not property.collectionType %}undefined{% else %}[]{% endif %},
      {% endif %}
      {% endfor %}
    },
    validationSchema: validationSchema,
    onSubmit: (values) => {
      handleOnSubmit(values);
    },
  });
  return (
    <Dialog open={opened} onClose={() => handleClose()} scroll={"paper"}>
      <form onSubmit={formik.handleSubmit}>
        <DialogTitle>{{entity.name}}</DialogTitle>
        <DialogContent>
        {% for property in entity.properties %}
        {% if property.type | isSimpleType %}
            {% if property.type|jstype == 'string' or property.type|jstype == 'number' %}
                <TextField
                    fullWidth
                    {% if property.type|jstype == 'number' %}
                    type="number"
                    {% endif %}
                    error={formik.touched.{{property.name}} && Boolean(formik.errors.{{property.name}})}
                    name="{{property.name}}"
                    label="{{property.name|capitalize}}"
                    placeholder="{{property.name|capitalize}}"
                    value={formik.values.{{property.name}}}
                    autoComplete="off"
                    helperText={formik.touched.{{property.name}} && formik.errors.{{property.name}}}
                    onChange={formik.handleChange}
                />
            {% else %}
                <FormControlLabel
                    control={
                    <Switch
                        checked={formik.values.{{property.name}}}
                        onChange={formik.handleChange}
                        name="{{property.name}}"
                        color="primary"
                    />
                    }
                    label="{{property.name|capitalize}}"
                />
            {% endif %}
        {% else %}
            {% if property.collectionType %}
                <FormControl fullWidth>
                    <InputLabel>{{property.name|capitalize}}</InputLabel>
                    <Select
                    fullWidth
                    name="{{property.name}}"
                    id="{{property.name}}"
                    multiple
                    value={formik.values.{{property.name}} }
                    onChange={formik.handleChange}
                    input={<Input />}
                    renderValue={(selected) => (selected as string[]).join(', ')}
                    MenuProps={MenuProps}
                    >
                    { {{property.type|return_plural|uncapitalize}}.map(({{property.type.name|uncapitalize}}) => (
                        <MenuItem key={ {{property.type.name|uncapitalize}}.id} value={ {{property.type.name|uncapitalize}}.id}>
                        <Checkbox checked={formik.values.{{property.name}}.includes({{property.type.name|uncapitalize}}.id)} />
                        <ListItemText primary={ {{property.type.name|uncapitalize}}.id} />
                        </MenuItem>
                    ))}
                    </Select>
                </FormControl>
            {% else %}
                <FormControl fullWidth>
                    <InputLabel>{{property.name|capitalize}}</InputLabel>
                    <Select
                    value={formik.values.{{property.name}} }
                    onChange={formik.handleChange}
                    name="{{property.name}}"
                    >
                    <MenuItem value={0}>
                        <em>None</em>
                    </MenuItem>
                    { {{property.type|return_plural|uncapitalize}}.map(({{property.type.name|uncapitalize}}) => (
                        <MenuItem key={ {{property.type.name|uncapitalize}}.id} value={ {{property.type.name|uncapitalize}}.id}>
                        { {{property.type.name|uncapitalize}}.id}
                        </MenuItem>
                    ))}
                    </Select>
                    <FormHelperText>Error</FormHelperText>
                </FormControl>
            {% endif %}
        {% endif %}
        {% endfor %}
        </DialogContent>
        <DialogActions>
         <Button onClick={() => handleClose()}>
            Cancel
          </Button>
          <Button type="submit" color="primary">
            Submit
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default {{entity.name}}Popup;
