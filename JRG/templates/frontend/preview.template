// Autogenerated from preview.template file at {{time}}
import {
  Button,
  Card,
  CardContent,
  CardHeader,
  makeStyles,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from "@material-ui/core";
import React, { Fragment, useEffect, useState, VFC } from "react";
import {{entity.name}}Popup from "../../components/generated/{{entity.name}}Popup";
import * as types from "../../types/generated/Types";
import { getAll{{entity|return_plural}}, add{{entity.name}}, update{{entity.name}}, delete{{entity.name}} } from "../../services/generated/{{entity.name}}Service";
{% for property in entity.properties %}
{% if not property.type|isSimpleType %}
import { getAll{{property.type|return_plural}} } from "../../services/generated/{{property.type.name}}Service";
{% endif %}
{% endfor %}


const useStyles = makeStyles((theme) => ({
  card: {
    margin: theme.spacing(4),
  },
}));

const {{entity|return_plural}}: VFC = () => {
  const [{{entity|return_plural|uncapitalize}}, set{{entity|return_plural}}] = useState<types.{{entity.name}}[]>([]);
  const [{{entity.name|uncapitalize}}, set{{entity.name}}] = useState<types.{{entity.name}} | undefined>();
  const [openedAdd, setOpenedAdd] = useState(false);
  const [openedEdit, setOpenedEdit] = useState(false);
  const [editedList, setEditedList] = useState(false);
  {% for property in entity.properties %}
  {% if not property.type|isSimpleType %}
  const [{{property.type|return_plural|uncapitalize}}, set{{property.type|return_plural}}] = useState<types.{{property.type.name}}[]>();
  {% endif %}
  {% endfor %}

  const classes = useStyles();

  const handleCloseAdd = () => {
    setOpenedAdd(false);
  };

  const handleCloseEdit = () => {
    setOpenedEdit(false);
  };

  const handleOnAddSubmit = (value: types.{{entity.name}}) => {
    add{{entity.name}}(value).then(
      response => {
        setEditedList(!editedList);
        setOpenedAdd(false);
      },
      error => {
        console.log(error);
      }
    )
  };

  const handleOnEditSubmit = (value: types.{{entity.name}}) => {
    update{{entity.name}}(value).then(
      response => {
        setEditedList(!editedList);
        setOpenedEdit(false);
      },
      error => {
        console.log(error);
      }
    )
  };

  const handleOnDelete = (id: number) => {
    delete{{entity.name}}(id).then(
      response => {
        setEditedList(!editedList);
      },
      error => {
        console.log(error);
      }
    )
  };

  const handleOnEdit = (value: types.{{entity.name}}) => {
    set{{entity.name}}(value);
    setOpenedEdit(true);
  };

  const handleOnAdd = () => {
    setOpenedAdd(true);
  };

  useEffect(() => {
    getAll{{entity|return_plural}}().then(
      response => {
        set{{entity|return_plural}}(response.data);
      },
      error => {
        console.log(error);
      }
    )
    {% for property in entity.properties %}
    {% if not property.type|isSimpleType %}
    getAll{{property.type|return_plural}}().then(
      response => {
        set{{property.type|return_plural}}(response.data);
      },
      error => {
        console.log(error);
      }
    )
    {% endif %}
    {% endfor %}
  }, [editedList]);

  return (
    <Fragment>
      {openedAdd && {% for property in entity.properties %}
  {% if not property.type|isSimpleType %}
  {{property.type|return_plural|uncapitalize}} !== undefined &&
  {% endif %}
  {% endfor %}(
        <{{entity.name}}Popup
          opened={openedAdd}
          handleClose={handleCloseAdd}
          handleOnSubmit={handleOnAddSubmit}
          {{entity.name|uncapitalize}}={undefined}
          {% for property in entity.properties %}
          {% if not property.type|isSimpleType %}
          {{property.type|return_plural|uncapitalize}} = { {{property.type|return_plural|uncapitalize}} }
          {% endif %}
          {% endfor %}
        />
      )}
      {openedEdit && {{entity.name|uncapitalize}} !== undefined && {% for property in entity.properties %}
  {% if not property.type|isSimpleType %}
  {{property.type|return_plural|uncapitalize}} !== undefined &&
  {% endif %}
  {% endfor %}(
        <{{entity.name}}Popup
          opened={openedEdit}
          handleClose={handleCloseEdit}
          handleOnSubmit={handleOnEditSubmit}
          {{entity.name|uncapitalize}}={ {{entity.name|uncapitalize}} }
          {% for property in entity.properties %}
          {% if not property.type|isSimpleType %}
          {{property.type|return_plural|uncapitalize}} = { {{property.type|return_plural|uncapitalize}} }
          {% endif %}
          {% endfor %}
        />
      )}
      <Card className={classes.card}>
        <CardHeader
          title="{{entity|return_plural}}"
          action={<Button onClick={() => handleOnAdd()}>Add</Button>}
        />
        <CardContent>
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  {% for property in entity.properties %}
                  {% if property.type|isSimpleType %}
                  <TableCell align="left">
                    <b>{{property.name|capitalize}}</b>
                  </TableCell>
                  {% endif %}
                  {% endfor %}
                  <TableCell></TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                { {{entity|return_plural|uncapitalize}}.map(({{entity.name|uncapitalize}}) => {
                  return (
                    <TableRow key={ {{entity.name|uncapitalize}}.id}>
                      {% for property in entity.properties %}
                      {% if property.type|isSimpleType %}
                      <TableCell>{% if property.type.name == 'bool' %}{ {{entity.name|uncapitalize}}.{{property.name}} ? 'True' : 'False'}{% else %}{ {{entity.name|uncapitalize}}.{{property.name}} }{% endif %}</TableCell>
                      {% endif %}
                      {% endfor %}
                      <TableCell>
                        <Button onClick={() => handleOnEdit({{entity.name|uncapitalize}})}>Edit</Button>
                        <Button onClick={() => handleOnDelete({{entity.name|uncapitalize}}.id)}>Delete</Button>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </TableContainer>
        </CardContent>
      </Card>
    </Fragment>
  );
};

export default {{entity|return_plural}};
